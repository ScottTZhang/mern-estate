1. Install React.js and Tailwind css
2. Terminal: npm create vite@latest client (folder name) -> React ->JS+SWC (fast version)
3. npm i -- installed the package.json
4. Install Tailwind CSS from viate: https://tailwindcss.com/docs/guides/vite
5. Update tailwind.config.js
6. Run your build process with npm run dev: npm run dev
7. Delete App.css, react.svg

Search extension and install "ES7 + React/Redux/React-Native snipets", "auto rename tag", "Conso ninja", Prettier, Tailwin CSS InntelliSense in Visual Studio

terminal: npm run dev

git init, git add ., git commit -m "install react js and tailwind css, first template"

Go to github.com to create repo, and push the commit.
https://www.geeksforgeeks.org/how-to-authenticate-git-push-with-github-using-a-token/#

[]Create pages and routes:
use "rfc" to create React functoinal component

npm i react-router-dom, for routing
In App.jsx, import {BrowserRouter, Routes, Route} from 'react-router-dom';

"Source Control", click + at "staged changes" line, enter message and Commit (commit and push)

[]Create header component
add the attr className='...' to style the tag
flex flex-wrap to adjust to mobile.
mx-auto, to make the div center
p-3, add padding
bg-transparent, remove backgroucd color
npm i react-icons
flex items-center, make search and icon in a line
w-24 sm:w-64, means w-24 for mobile, after mobile, use w-64

import {Link} from 'react-router-dom';
Bring from one page to another page without refreshing.

[]Create and run server
In root folder:
npm init -y 
npm i express
npm i nodemon, to automatic restart on code change

"dev": "nodemon api/index.js",
"start": "node api/index.js", for deploy to run backend.
You don't use nodemon in production
Then command: npm run dev

[]Connect to database
install mongoose: npm i mongoose
import mongoose
connect mongoose
cloud.mongodb.com:create account
connect to cloud mongodb

use .env to hide db info when pushing
npm i dotenv
import dotenv from 'dotenv';
dotenv.config();

[]Create user model
new mongoose.Schema(), to create a table column
timestamps, to automatic add time_created, time_updated
const User = mongoose.model('User', userSchema);

[] Create a test API route
in index.js file
app.get('/', (req, res)==>{})
req is request from browser client
res is response from server
In browser, the port should match the server port (3000), such as "http://localhost:3000/"
Not the client page, http://localhost:5173

route folder contains the proxy between server and client
user.route.js: 
import { test } from '../controllers/user.controller.js';  //must add ".js" at the end
router.get('/test', (req, res) => {
  res.json({
    message: 'hello world'
  })   // bring (req, res) function to user.controller.js
});
index.js:
app.use('/api/user', userRouter);
user.controller.js:
export const test = (req, res) => {...};
Browser: http://localhost:3000/api/user/test

When importing from a named export, e.g.
// my-module.js
// ... code ..
export { Something1, Something2}
You can alias the import using as:
import { Something1 as MySomething } from "my-module.js"


For importing default exports, e.g.
// my-module.js
// ... code ..
export default Something
You can alias the import directly:
import MySomething from "my-module.js"

[] Create sign up API route
Create auth.route.js, export it (router.post("/signup", signup);)
Create auth.controller.js
In index.js, import auth.route.js, add app.use('/api/auth', authRouter);

Install "Insomnia api test" app -> create Request Collection-> create folder "auth" -> create "http request" sign up (POST)
URI: localhost:3000/api/auth/signup
create a test json {}, click SEND
terminal can see the "undefined" obj. Todisplay json obj, index.js add app.use(express.json());

auth.controller.js:
async ... await, to wait for the line execution finished

hash the password: npm i bcryptjs
In auth.controller.js: 
import bcryptjs from 'bcryptjs';
const hashedPassword = bcryptjs.hashSync(password, 10);

Click database name on https://cloud.mongodb.com/ to see updated results

[10/20/24] Middleware and function to handle possible errors
In index.js: app.use((err, req, res, next) => {});
In auth.controller.js: const signup = async (req, res, next) => {}

Create error.js middleware
In auth.controller.js: next(errorHandler(550, 'Error from the function'));

[] Complete sign up page UI
In SignUp.jsx:
import {Link} from 'react-router-dom';
<Link to={"/sign-in"}><span className='text-blue-700'>Sign in</span></Link>

[] Complete sign update functionality
add proxy in vite.config.js, to avoid adding "http://localhost:3000" each time.

In SignUp.jsx:
import {Link, useNavigate} from 'react-router-dom'; //to navigate to sign up page after successful sign up

[] Create sign in API route
Create export const signin in controller.js -> JSON Web Token (JWT), to create a token
Add router.post("/signin", signin); in route.js
Test localhost:3000/api/auth/signin in Insomnia

[] Complete sign in page functionality
Browser -> Inspect -> Application -> Cookies

[10/23/24] Add redux toolkit
To have user data in different places in apps
https://redux-toolkit.js.org/tutorials/quick-start
npm install @reduxjs/toolkit react-redux, install in client side
Create store.js
Update main.jsx
Create userSlice.js
Update store.js: reducer: {user: userReducer}
Update signIn.jsx
Chrome - Inspect - redux tool - 'State' button
Problem: when refresh the page, Redux - Actions - State - Tree: user becomes null.

[10/24/24]
https://redux.js.org/tutorials/fundamentals/part-1-overview
Redux is a pattern and library for managing and updating global application state, where the UI triggers events called "actions" to describe what happened, and separate update logic called "reducers" updates the state in response.

Redux is more useful when:
You have large amounts of application state that are needed in many places in the app
The app state is updated frequently over time
The logic to update that state may be complex
The app has a medium or large-sized codebase, and might be worked on by many people
(Redux is better in state management. Others like Context, useReducer + useContext, GraphQL, Appllo client)

What Redux can do:
Caching state from a server
UI state
other complex data management on the client

(Redux):
The center of every Redux application is the store.
The only way to cause an update to the state is to create a plain action object that describes "something that happened in the application", and then dispatch the action to the store to tell it what happened.
When an action is dispatched, the store runs the root reducer function. Action objects always have a type field, which is a string you provide that acts as a unique name for the action.
Finally, the store notifies subscribers that the state has been updated so the UI can be updated with the new data.
A reducer is a function that receives the current state and an action object, decides how to update the state if necessary, and returns the new state: (state, action) => newState. You can think of a reducer as an event listener which handles events based on the received action (event) type.

react-redux:
store.js:
import { configureStore } from '@reduxjs/toolkit';
-- Create a Redux store with configureStore. (It uses the low-level Redux core createStore method internally, but wraps that to provide good defaults to the store setup for a better development experience.)

main.jsx:
import { store } from './redux/store.js'
import { Provider } from 'react-redux'; 
-- Provide the Redux store to the React application components.

userSlice.js:
import { createSlice } from "@reduxjs/toolkit";
-- Create a Redux "slice" reducer with createSlice: Call createSlice with a string name, an initial state, and named reducer functions.

SignIn.jsx:
import { useDispatch, useSelector } from 'react-redux';
import { signInStart, signInSuccess, signInFailure } from '../redux/user/userSlice.js';
-- Read data from the store with useSelector hook.
-- Get the dispatch function with the useDispatch hook, and dispatch actions as needed

[10/29/24] Add Redux persist
npm i redux-persist
Update store.js
Update main.jsx
Chrome - Inspect - Application - Local storage - http://localhost: persist:root. Right click - Delete. - Redux - State: user becomes null.
After sign in, the user is not null anymore.

[10/30/14] Add Google OAuth functionality
[]
Create OAuth.jsx
Update SignIn.jsx, SignUp.jsx

[]
firebase.google.com -> go to console -> Create a project -> Disable "Enable Google Analytics..." -> Create project
</> web icon -> Register app
npm install firebase in client folder
Create firebase.js. Move APIKey to .env
Firebase page -> Build -> Authentication -> Provider: Google: Enable -> Fill "Estate App" in Public-facing name.
Google Authentication is ready.

[]
Update OAuth.jsx:
  const provider = new GoogleAuthProvider();
  const auth = getAuth(app);
  const result = await signInWithPopup(auth, provider);
Update auth.route.js
Update auth.controller.js

[]
Chrome Inspect -> Network -> Reponse, to see auth result

[10/31/24] Update header and make profile page private
Update header.jsx
  const currentUser = useSelector(state => state.user.user.currentUser); -- to get the correct currentUser object
img alt attribute is used to add alternative text to an image.
img className='object-cover'
Create PrivateRoute.jsx
  return currentUser ? <Outlet /> : <Navigate to='/sign-in' />;

Chrome - Inspect - Application - local storage - delete and refresh, to see the redirect to sign-in

[11/02/24] Complete profile UI
Update Pofile.jsx:
className=cursor-pointer

[] Complete image upload functionality
Update Profile.jsx:
import { useRef } from "react";
Add Storage on Firebase - Rules: request.resource.size < 2 * 1024 * 1024 (size < 2 MB)
const [file, setFile] = useState(undefined);
onChange={(e)=>setFile(e.target.files[0])...}
Add useEffect;
issue: When refresh the page, it will go back again.

[11/03/2024] Create update user API route
Update user.route.js
Update user.controller.js
Create verifyUser.js
npm i cookie-parser, in MERN-estate folder
import cookieParser from 'cookie-parser'; //in index.js

[11/5/24] Complete update user functionality
Update Profile.jsx: handleChange, handleSubmit
Update userSlice.js: add reducers. 
Update Profile.jsx: import useDispatch , const dispatch = useDispatch(), 
    e.preventDefault(); //must include ()