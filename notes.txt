1. Install React.js and Tailwind css
2. Terminal: npm create vite@latest client (folder name) -> React ->JS+SWC (fast version)
3. npm i -- installed the package.json
4. Install Tailwind CSS from viate: https://tailwindcss.com/docs/guides/vite
5. Update tailwind.config.js
6. Run your build process with npm run dev: npm run dev
7. Delete App.css, react.svg

Search extension and install "ES7 + React/Redux/React-Native snipets", "auto rename tag", "Conso ninja", Prettier, Tailwin CSS InntelliSense in Visual Studio

terminal: npm run dev

git init, git add ., git commit -m "install react js and tailwind css, first template"

Go to github.com to create repo, and push the commit.
https://www.geeksforgeeks.org/how-to-authenticate-git-push-with-github-using-a-token/#

[]Create pages and routes:
use "rfc" to create React functoinal component

npm i react-router-dom, for routing
In App.jsx, import {BrowserRouter, Routes, Route} from 'react-router-dom';

"Source Control", click + at "staged changes" line, enter message and Commit (commit and push)

[]Create header component
add the attr className='...' to style the tag
flex flex-wrap to adjust to mobile.
mx-auto, to make the div center
p-3, add padding
bg-transparent, remove backgroucd color
npm i react-icons
flex items-center, make search and icon in a line
w-24 sm:w-64, means w-24 for mobile, after mobile, use w-64

import {Link} from 'react-router-dom';
Bring from one page to another page without refreshing.

[]Create and run server
In root folder:
npm init -y 
npm i express
npm i nodemon, to automatic restart on code change

"dev": "nodemon api/index.js",
"start": "node api/index.js", for deploy to run backend.
You don't use nodemon in production
Then command: npm run dev

[]Connect to database
install mongoose: npm i mongoose
import mongoose
connect mongoose
cloud.mongodb.com:create account
connect to cloud mongodb

use .env to hide db info when pushing
npm i dotenv
import dotenv from 'dotenv';
dotenv.config();

[]Create user model
new mongoose.Schema(), to create a table column
timestamps, to automatic add time_created, time_updated
const User = mongoose.model('User', userSchema);

[] Create a test API route
in index.js file
app.get('/', (req, res)==>{})
req is request from browser client
res is response from server
In browser, the port should match the server port (3000), such as "http://localhost:3000/"
Not the client page, http://localhost:5173

route folder contains the proxy between server and client
user.route.js: 
import { test } from '../controllers/user.controller.js';  //must add ".js" at the end
router.get('/test', (req, res) => {
  res.json({
    message: 'hello world'
  })   // bring (req, res) function to user.controller.js
});
index.js:
app.use('/api/user', userRouter);
user.controller.js:
export const test = (req, res) => {...};
Browser: http://localhost:3000/api/user/test

When importing from a named export, e.g.
// my-module.js
// ... code ..
export { Something1, Something2}
You can alias the import using as:
import { Something1 as MySomething } from "my-module.js"


For importing default exports, e.g.
// my-module.js
// ... code ..
export default Something
You can alias the import directly:
import MySomething from "my-module.js"

[] Create sign up API route
Create auth.route.js, export it (router.post("/signup", signup);)
Create auth.controller.js
In index.js, import auth.route.js, add app.use('/api/auth', authRouter);

Install "Insomnia api test" app -> create Request Collection-> create folder "auth" -> create "http request" sign up (POST)
URI: localhost:3000/api/auth/signup
create a test json {}, click SEND
terminal can see the "undefined" obj. Todisplay json obj, index.js add app.use(express.json());

auth.controller.js:
async ... await, to wait for the line execution finished

hash the password: npm i bcryptjs
In auth.controller.js: 
import bcryptjs from 'bcryptjs';
const hashedPassword = bcryptjs.hashSync(password, 10);

Click database name on https://cloud.mongodb.com/ to see updated results